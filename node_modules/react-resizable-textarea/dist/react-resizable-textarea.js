(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["ReactResizableTextarea"] = factory(require("react"));
	else
		root["ReactResizableTextarea"] = factory(root["react"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ResizableTextArea = function (_Component) {
	    _inherits(ResizableTextArea, _Component);

	    function ResizableTextArea(props) {
	        _classCallCheck(this, ResizableTextArea);

	        var _this = _possibleConstructorReturn(this, (ResizableTextArea.__proto__ || Object.getPrototypeOf(ResizableTextArea)).call(this, props));

	        _this._lastY = 0;
	        _this._lastX = 0;
	        _this._textAreaHeight = 0;
	        _this._textAreaWidth = 0;

	        _this._onEnableDrag = _this._onEnableDrag.bind(_this);
	        _this._onDisableDrag = _this._onDisableDrag.bind(_this);
	        _this._onMouseMove = _this._onMouseMove.bind(_this);
	        _this._autoSizeTextarea = _this._autoSizeTextarea.bind(_this);
	        return _this;
	    }

	    _createClass(ResizableTextArea, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.props.fitOnMount) {
	                this._autoSizeTextarea();
	            }

	            this._dragger.addEventListener('mousedown', this._onEnableDrag);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this._dragger.removeEventListener('mousedown', this._onEnableDrag);
	            this._removeEventListeners();
	        }
	    }, {
	        key: 'getTextarea',
	        value: function getTextarea() {
	            return this._textArea;
	        }
	    }, {
	        key: '_autoSizeTextarea',
	        value: function _autoSizeTextarea() {
	            var lastOverflowY = this._textArea.style.overflowY;
	            var width = Math.max(this._textArea.offsetWidth, this.props.minWidth);

	            this._textArea.style.width = width + 'px';
	            this._textArea.style.overflowY = 'hidden';

	            var textAreaCS = window.getComputedStyle(this._textArea);
	            var topBorderWidth = parseInt(textAreaCS.getPropertyValue('border-top-width'), 10);
	            var bottomBorderWidth = parseInt(textAreaCS.getPropertyValue('border-bottom-width'), 10);

	            var height = topBorderWidth + bottomBorderWidth + this._textArea.scrollHeight;
	            height = Math.max(height, this.props.minHeight);

	            this._textArea.style.height = height + 'px';
	            this._textArea.style.overflowY = lastOverflowY;
	        }
	    }, {
	        key: '_onEnableDrag',
	        value: function _onEnableDrag(e) {
	            document.addEventListener('mousemove', this._onMouseMove);
	            document.addEventListener('mouseup', this._onDisableDrag);

	            this._lastY = e.clientY;
	            this._lastX = e.clientX;
	            this._textAreaHeight = this._textArea.offsetHeight;
	            this._textAreaWidth = this._textArea.offsetWidth;

	            // this prevents scrolling while dragging the textarea
	            e.preventDefault();
	        }
	    }, {
	        key: '_onDisableDrag',
	        value: function _onDisableDrag() {
	            this._removeEventListeners();

	            // remove selection, which can be a site effect when hovering over the text
	            window.getSelection().removeAllRanges();
	        }
	    }, {
	        key: '_removeEventListeners',
	        value: function _removeEventListeners() {
	            document.removeEventListener('mousemove', this._onMouseMove);
	            document.removeEventListener('mouseup', this._onDisableDrag);
	            if (this._scrollableContainer) {
	                this._scrollableContainer.removeEventListener('mousedown', this._onPreventMouseDownOnScrollableParent);
	            }
	        }
	    }, {
	        key: '_onMouseMove',
	        value: function _onMouseMove(e) {
	            if (this.props.directions.indexOf('y') !== -1) {
	                var yMovement = e.clientY - this._lastY;
	                this._textAreaHeight = Math.max(this._textAreaHeight + yMovement, this.props.minHeight);
	                this._textArea.style.height = this._textAreaHeight + 'px';
	            }

	            if (this.props.directions.indexOf('x') !== -1) {
	                var xMovement = e.clientX - this._lastX;
	                this._textAreaWidth = Math.max(this._textAreaWidth + xMovement, this.props.minWidth);
	                this._textArea.style.width = this._textAreaWidth + 'px';
	            }

	            this._lastX = e.clientX;
	            this._lastY = e.clientY;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var props = {};

	            Object.keys(this.props).forEach(function (k) {
	                props[k] = _this2.props[k];
	            });

	            props.className = 'resizable-textarea ' + this.props.className;
	            props.ref = function (t) {
	                return _this2._textArea = t;
	            };

	            if (props.style) {
	                props.style.minWidth = props.minWidth;
	                props.style.minHeight = props.minHeight;
	            } else {
	                props.style = {
	                    minWidth: props.minWidth,
	                    minHeight: props.minHeight
	                };
	            }

	            delete props.directions;
	            delete props.minWidth;
	            delete props.minHeight;
	            delete props.fitOnMount;

	            var draggerClassNames = 'resizable-textarea-dragger direction-' + this.props.directions;

	            return _react2.default.createElement('div', {
	                className: 'resizable-textarea-container',
	                ref: function ref(c) {
	                    return _this2._container = c;
	                }
	            }, _react2.default.createElement('textarea', props), _react2.default.createElement('div', { className: draggerClassNames, ref: function ref(d) {
	                    return _this2._dragger = d;
	                } }));
	        }
	    }]);

	    return ResizableTextArea;
	}(_react.Component);

	ResizableTextArea.propTypes = {
	    directions: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    minWidth: _react.PropTypes.number,
	    minHeight: _react.PropTypes.number,
	    fitOnMount: _react.PropTypes.bool
	};

	ResizableTextArea.defaultProps = {
	    directions: 'y',
	    className: '',
	    minWidth: 100,
	    minHeight: 30,
	    fitOnMount: false
	};

	exports.default = ResizableTextArea;

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }
/******/ ])
});
;